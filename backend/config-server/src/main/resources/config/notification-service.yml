server:
  port: 8085
spring:
  liquibase:
    change-log: classpath:db/changelog/master.xml
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    properties:
      spring:
        json:
          type:
            mapping: 'emailNotificationSentEvent:com.example.notificationservice.infrastructure.kafka.event.outgoing.EmailNotificationSentEvent,
                      smsNotificationSentEvent:com.example.notificationservice.infrastructure.kafka.event.outgoing.SmsNotificationSentEvent,
                      systemNotificationSentEvent:com.example.notificationservice.infrastructure.kafka.event.outgoing.SystemNotificationSentEvent'
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring:
          json:
            trusted:
              packages: com.example.loanservice.infrastructure.kafka.event.outgoing,com.example.requestservice.infrastructure.kafka.event.outgoing,com.example.authservice.infrastructure.kafka.event.outgoing
            type:
              mapping: 'bookItemLostEvent:com.example.notificationservice.infrastructure.kafka.event.incoming.BookItemLostEvent,
                        bookItemReturnedEvent:com.example.notificationservice.infrastructure.kafka.event.incoming.BookItemReturnedEvent,
                        loanCreatedEvent:com.example.notificationservice.infrastructure.kafka.event.incoming.LoanCreatedEvent,
                        loanProlongationNotAllowed:com.example.notificationservice.infrastructure.kafka.event.incoming.LoanProlongationNotAllowed,
                        loanProlongedEvent:com.example.notificationservice.infrastructure.kafka.event.incoming.LoanProlongedEvent,
                        requestAvailableToLoanEvent:com.example.notificationservice.infrastructure.kafka.event.incoming.RequestAvailableToLoanEvent,
                        requestCanceledEvent:com.example.notificationservice.infrastructure.kafka.event.incoming.RequestCanceledEvent,
                        requestCreatedEvent:com.example.notificationservice.infrastructure.kafka.event.incoming.RequestCreatedEvent,
                        requestReadyEvent:com.example.notificationservice.infrastructure.kafka.event.incoming.RequestReadyEvent,
                        reservationCreatedEvent:com.example.notificationservice.infrastructure.kafka.event.incoming.ReservationCreatedEvent,
                        userCreatedEvent:com.example.notificationservice.infrastructure.kafka.event.incoming.UserCreatedEvent'
eureka:
  instance:
    prefer-ip-address: true
  client:
    fetch-registry: true
    register-with-eureka: true
    service-url:
      defaultZone: http://localhost:8761/eureka